from secml_malware.attack.blackbox.c_black_box_padding_evasion import CBlackBoxPaddingEvasionProblem
from secml_malware.attack.blackbox.c_blackbox_header_problem import CBlackBoxHeaderEvasionProblem
from secml_malware.attack.blackbox.c_wrapper_phi import CEnd2EndWrapperPhi
from secml_malware.attack.blackbox.ga.c_nevergrad_ga import CNevergradGeneticAlgorithm
from secml_malware.attack.blackbox.tests.black_box_base_test import BlackBoxBaseTests

try:
    import nevergrad
    from nevergrad.optimization.differentialevolution import DifferentialEvolution
except ImportError:
    raise ImportError("Install NEVERGRAD to test Nevergrad black box evasion")


class NevergradEvasionAttackTestSuite(BlackBoxBaseTests):

    def test_blackbox_partial_dos_header_malconv(self):
        black_box_attack = CBlackBoxHeaderEvasionProblem(
            CEnd2EndWrapperPhi(self.end2end_classifier),
            optimize_all_dos=False,
            iterations=5,
            population_size=10
        )
        engine = CNevergradGeneticAlgorithm(black_box_attack)
        y_pred, _, _, _ = engine.run(self.X, self.Y)
        self.assert_evasion_result(y_pred)

    def test_blackbox_dos_header_malconv(self):
        black_box_attack = CBlackBoxHeaderEvasionProblem(
            CEnd2EndWrapperPhi(self.end2end_classifier),
            optimize_all_dos=False,
            iterations=5,
            population_size=10
        )
        engine = CNevergradGeneticAlgorithm(black_box_attack)
        y_pred, _, _, _ = engine.run(self.X, self.Y)
        self.assert_evasion_result(y_pred)

    def test_blackbox_padding_malconv(self):
        black_box_attack = CBlackBoxPaddingEvasionProblem(
            CEnd2EndWrapperPhi(self.end2end_classifier),
            how_many_padding_bytes=1024,
            iterations=5,
            population_size=10
        )
        engine = CNevergradGeneticAlgorithm(black_box_attack)
        y_pred, _, _, _ = engine.run(self.X, self.Y)
        self.assert_evasion_result(y_pred)
